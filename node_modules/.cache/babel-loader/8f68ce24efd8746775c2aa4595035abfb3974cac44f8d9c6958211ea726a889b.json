{"ast":null,"code":"// App.js - Hovedkomponenten for Nyskolen Posten\nimport React,{useState,useEffect}from'react';import{HashRouter as Router,Routes,Route,Link}from'react-router-dom';import'./App.css';import Hjem from'./components/Hjem';import OmOss from'./components/OmOss';import NyArtikkel from'./components/NyArtikkel';import ArtikkelVisning from'./components/ArtikkelVisning';import Login from'./components/Login';import Register from'./components/Register';import MineArtikler from'./components/MineArtikler';import AdminPanel from'./components/AdminPanel';import Footer from'./components/Footer';import Header from'./components/Header';import Innlogging from'./components/Innlogging';import Registrering from'./components/Registrering';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[innloggetBruker,setInnloggetBruker]=useState(null);const[artikler,setArtikler]=useState([]);const[brukere,setBrukere]=useState([]);const[jobbliste,setJobbliste]=useState([]);const[kategoriliste,setKategoriliste]=useState([]);// Admin e-postliste for automatisk godkjenning og admin-rolle\nconst adminEpostliste=['mattis.tollefsen@nionett.no','admin@nyskolen.no'];// Last inn data fra localStorage ved oppstart\nuseEffect(()=>{// Last inn innlogget bruker\nconst lagretBruker=localStorage.getItem('innloggetBruker');if(lagretBruker){setInnloggetBruker(JSON.parse(lagretBruker));}// Last inn artikler\nconst lagredeArtikler=localStorage.getItem('artikler');if(lagredeArtikler){setArtikler(JSON.parse(lagredeArtikler));}// Last inn brukere\nconst lagredeBrukere=localStorage.getItem('brukere');if(lagredeBrukere){setBrukere(JSON.parse(lagredeBrukere));}else{// Opprett admin-bruker hvis ingen brukere finnes\nconst adminBruker={id:'admin-'+Date.now(),navn:'Administrator',epost:'admin@nyskolen.no',passord:'admin123',rolle:'admin',godkjent:true,dato:new Date().toISOString()};setBrukere([adminBruker]);localStorage.setItem('brukere',JSON.stringify([adminBruker]));}// Last inn jobbliste\nconst lagretJobbliste=localStorage.getItem('jobbliste');if(lagretJobbliste){setJobbliste(JSON.parse(lagretJobbliste));}else{// Opprett standard jobbliste hvis ingen finnes\nconst standardJobbliste=[{id:'jobb-1',navn:'Administrator',rolle:'Redaktør',dato:new Date().toISOString()}];setJobbliste(standardJobbliste);localStorage.setItem('jobbliste',JSON.stringify(standardJobbliste));}// Last inn kategoriliste\nconst lagretKategoriliste=localStorage.getItem('kategoriliste');if(lagretKategoriliste){setKategoriliste(JSON.parse(lagretKategoriliste));}else{// Opprett standard kategoriliste hvis ingen finnes\nconst standardKategoriliste=[{id:'kat-1',kategori:'Nyheter',ansvarlig:'Administrator'},{id:'kat-2',kategori:'Kultur',ansvarlig:'Administrator'},{id:'kat-3',kategori:'Sport',ansvarlig:'Administrator'},{id:'kat-4',kategori:'Skole',ansvarlig:'Administrator'},{id:'kat-5',kategori:'Saksmøtet',ansvarlig:'Administrator'},{id:'kat-6',kategori:'Meninger',ansvarlig:'Administrator'},{id:'kat-7',kategori:'Heureka',ansvarlig:'Administrator'},{id:'kat-8',kategori:'Klassen',ansvarlig:'Administrator'},{id:'kat-9',kategori:'Annet',ansvarlig:'Administrator'}];setKategoriliste(standardKategoriliste);localStorage.setItem('kategoriliste',JSON.stringify(standardKategoriliste));}},[]);// Funksjon for å logge inn\nconst handleLogin=bruker=>{setInnloggetBruker(bruker);localStorage.setItem('innloggetBruker',JSON.stringify(bruker));};// Funksjon for å logge ut\nconst handleLogout=()=>{setInnloggetBruker(null);localStorage.removeItem('innloggetBruker');};// Funksjon for å registrere ny bruker\nconst registrerBruker=nyBruker=>{// Sjekk om e-posten allerede er registrert\nconst eksisterendeBruker=brukere.find(b=>b.epost===nyBruker.epost);if(eksisterendeBruker){return{success:false,message:'E-postadressen er allerede registrert'};}// Sjekk om e-posten er i admin-listen\nconst erAdmin=adminEpostliste.includes(nyBruker.epost);// Opprett bruker-objekt\nconst brukerObjekt={...nyBruker,id:'bruker-'+Date.now(),rolle:erAdmin?'admin':'journalist',godkjent:true,// Alle brukere er automatisk godkjent\ndato:new Date().toISOString()};// Legg til i brukerlisten\nconst oppdatertBrukere=[...brukere,brukerObjekt];setBrukere(oppdatertBrukere);localStorage.setItem('brukere',JSON.stringify(oppdatertBrukere));// Legg til i jobblisten\nconst nyJobblisteOppføring={id:'jobb-'+Date.now(),navn:brukerObjekt.navn,rolle:erAdmin?'Redaktør':'Journalist',dato:new Date().toISOString()};const oppdatertJobbliste=[...jobbliste,nyJobblisteOppføring];setJobbliste(oppdatertJobbliste);localStorage.setItem('jobbliste',JSON.stringify(oppdatertJobbliste));return{success:true,message:'Bruker registrert'};};// Funksjon for å oppdatere bruker\nconst oppdaterBruker=oppdatertBruker=>{const oppdatertBrukere=brukere.map(bruker=>bruker.id===oppdatertBruker.id?oppdatertBruker:bruker);setBrukere(oppdatertBrukere);localStorage.setItem('brukere',JSON.stringify(oppdatertBrukere));// Oppdater også innlogget bruker hvis det er samme bruker\nif(innloggetBruker&&innloggetBruker.id===oppdatertBruker.id){setInnloggetBruker(oppdatertBruker);localStorage.setItem('innloggetBruker',JSON.stringify(oppdatertBruker));}};// Funksjon for å slette bruker\nconst slettBruker=brukerId=>{var _brukere$find;const oppdatertBrukere=brukere.filter(bruker=>bruker.id!==brukerId);setBrukere(oppdatertBrukere);localStorage.setItem('brukere',JSON.stringify(oppdatertBrukere));// Fjern også fra jobblisten\nconst brukerNavn=(_brukere$find=brukere.find(b=>b.id===brukerId))===null||_brukere$find===void 0?void 0:_brukere$find.navn;if(brukerNavn){const oppdatertJobbliste=jobbliste.filter(jobb=>jobb.navn!==brukerNavn);setJobbliste(oppdatertJobbliste);localStorage.setItem('jobbliste',JSON.stringify(oppdatertJobbliste));}};// Funksjon for å legge til ny artikkel\nconst leggTilArtikkel=nyArtikkel=>{const artikkelObjekt={...nyArtikkel,artikkelID:'artikkel-'+Date.now(),forfatter:innloggetBruker.navn,forfatterID:innloggetBruker.id,dato:new Date().toISOString(),godkjent:innloggetBruker.rolle==='admin'||jobbliste.some(jobb=>jobb.navn===innloggetBruker.navn&&jobb.rolle==='Redaktør')// Automatisk godkjent hvis admin eller redaktør\n};const oppdatertArtikler=[...artikler,artikkelObjekt];setArtikler(oppdatertArtikler);localStorage.setItem('artikler',JSON.stringify(oppdatertArtikler));return artikkelObjekt.artikkelID;};// Funksjon for å godkjenne artikkel\nconst godkjennArtikkel=artikkelID=>{const oppdatertArtikler=artikler.map(artikkel=>{if(artikkel.artikkelID===artikkelID){return{...artikkel,godkjent:true};}return artikkel;});setArtikler(oppdatertArtikler);localStorage.setItem('artikler',JSON.stringify(oppdatertArtikler));};// Funksjon for å slette artikkel\nconst slettArtikkel=artikkelID=>{const oppdatertArtikler=artikler.filter(artikkel=>artikkel.artikkelID!==artikkelID);setArtikler(oppdatertArtikler);localStorage.setItem('artikler',JSON.stringify(oppdatertArtikler));};// Funksjon for å oppdatere artikkel\nconst oppdaterArtikkel=oppdatertArtikkel=>{const oppdatertArtikler=artikler.map(artikkel=>artikkel.artikkelID===oppdatertArtikkel.artikkelID?oppdatertArtikkel:artikkel);setArtikler(oppdatertArtikler);localStorage.setItem('artikler',JSON.stringify(oppdatertArtikler));};// Funksjon for å oppdatere jobbliste\nconst oppdaterJobbliste=nyJobbliste=>{setJobbliste(nyJobbliste);localStorage.setItem('jobbliste',JSON.stringify(nyJobbliste));};// Funksjon for å oppdatere kategoriliste\nconst oppdaterKategoriliste=nyKategoriliste=>{setKategoriliste(nyKategoriliste);localStorage.setItem('kategoriliste',JSON.stringify(nyKategoriliste));};// Funksjon for å endre rolle på en bruker i jobblisten\nconst endreRolleBruker=(jobbId,nyRolle)=>{const oppdatertJobbliste=jobbliste.map(jobb=>{if(jobb.id===jobbId){return{...jobb,rolle:nyRolle};}return jobb;});setJobbliste(oppdatertJobbliste);localStorage.setItem('jobbliste',JSON.stringify(oppdatertJobbliste));// Oppdater også brukerens rolle i brukerlisten\nconst jobb=jobbliste.find(j=>j.id===jobbId);if(jobb){const bruker=brukere.find(b=>b.navn===jobb.navn);if(bruker){const nyBrukerRolle=nyRolle==='Redaktør'?'admin':'journalist';const oppdatertBruker={...bruker,rolle:nyBrukerRolle};oppdaterBruker(oppdatertBruker);}}};return/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(Header,{innloggetBruker:innloggetBruker,onLogout:handleLogout}),/*#__PURE__*/_jsx(\"main\",{className:\"innhold\",children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Hjem,{artikler:artikler})}),/*#__PURE__*/_jsx(Route,{path:\"/innlogging\",element:/*#__PURE__*/_jsx(Innlogging,{onLogin:handleLogin,brukere:brukere})}),/*#__PURE__*/_jsx(Route,{path:\"/registrering\",element:/*#__PURE__*/_jsx(Registrering,{onRegistrer:registrerBruker})}),/*#__PURE__*/_jsx(Route,{path:\"/ny-artikkel\",element:/*#__PURE__*/_jsx(NyArtikkel,{innloggetBruker:innloggetBruker,onLeggTilArtikkel:leggTilArtikkel,kategoriliste:kategoriliste})}),/*#__PURE__*/_jsx(Route,{path:\"/artikkel/:artikkelID\",element:/*#__PURE__*/_jsx(ArtikkelVisning,{artikler:artikler,innloggetBruker:innloggetBruker})}),/*#__PURE__*/_jsx(Route,{path:\"/admin\",element:/*#__PURE__*/_jsx(AdminPanel,{innloggetBruker:innloggetBruker,artikler:artikler,brukere:brukere,jobbliste:jobbliste,kategoriliste:kategoriliste,onDeleteArticle:slettArtikkel,onUpdateArticle:oppdaterArtikkel,onUpdateUser:oppdaterBruker,onDeleteUser:slettBruker,onApproveArticle:godkjennArtikkel,onUpdateJobbliste:oppdaterJobbliste,onUpdateKategoriliste:oppdaterKategoriliste,onEndreRolleBruker:endreRolleBruker})}),/*#__PURE__*/_jsx(Route,{path:\"/om-oss\",element:/*#__PURE__*/_jsx(OmOss,{jobbliste:jobbliste})})]})}),/*#__PURE__*/_jsx(Footer,{})]})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","HashRouter","Router","Routes","Route","Link","Hjem","OmOss","NyArtikkel","ArtikkelVisning","Login","Register","MineArtikler","AdminPanel","Footer","Header","Innlogging","Registrering","jsx","_jsx","jsxs","_jsxs","App","innloggetBruker","setInnloggetBruker","artikler","setArtikler","brukere","setBrukere","jobbliste","setJobbliste","kategoriliste","setKategoriliste","adminEpostliste","lagretBruker","localStorage","getItem","JSON","parse","lagredeArtikler","lagredeBrukere","adminBruker","id","Date","now","navn","epost","passord","rolle","godkjent","dato","toISOString","setItem","stringify","lagretJobbliste","standardJobbliste","lagretKategoriliste","standardKategoriliste","kategori","ansvarlig","handleLogin","bruker","handleLogout","removeItem","registrerBruker","nyBruker","eksisterendeBruker","find","b","success","message","erAdmin","includes","brukerObjekt","oppdatertBrukere","nyJobblisteOppføring","oppdatertJobbliste","oppdaterBruker","oppdatertBruker","map","slettBruker","brukerId","_brukere$find","filter","brukerNavn","jobb","leggTilArtikkel","nyArtikkel","artikkelObjekt","artikkelID","forfatter","forfatterID","some","oppdatertArtikler","godkjennArtikkel","artikkel","slettArtikkel","oppdaterArtikkel","oppdatertArtikkel","oppdaterJobbliste","nyJobbliste","oppdaterKategoriliste","nyKategoriliste","endreRolleBruker","jobbId","nyRolle","j","nyBrukerRolle","children","className","onLogout","path","element","onLogin","onRegistrer","onLeggTilArtikkel","onDeleteArticle","onUpdateArticle","onUpdateUser","onDeleteUser","onApproveArticle","onUpdateJobbliste","onUpdateKategoriliste","onEndreRolleBruker"],"sources":["/Users/mattis/src/NyskolenPosten/src/App.js"],"sourcesContent":["// App.js - Hovedkomponenten for Nyskolen Posten\nimport React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport './App.css';\nimport Hjem from './components/Hjem';\nimport OmOss from './components/OmOss';\nimport NyArtikkel from './components/NyArtikkel';\nimport ArtikkelVisning from './components/ArtikkelVisning';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport MineArtikler from './components/MineArtikler';\nimport AdminPanel from './components/AdminPanel';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport Innlogging from './components/Innlogging';\nimport Registrering from './components/Registrering';\n\nfunction App() {\n  const [innloggetBruker, setInnloggetBruker] = useState(null);\n  const [artikler, setArtikler] = useState([]);\n  const [brukere, setBrukere] = useState([]);\n  const [jobbliste, setJobbliste] = useState([]);\n  const [kategoriliste, setKategoriliste] = useState([]);\n  \n  // Admin e-postliste for automatisk godkjenning og admin-rolle\n  const adminEpostliste = ['mattis.tollefsen@nionett.no', 'admin@nyskolen.no'];\n  \n  // Last inn data fra localStorage ved oppstart\n  useEffect(() => {\n    // Last inn innlogget bruker\n    const lagretBruker = localStorage.getItem('innloggetBruker');\n    if (lagretBruker) {\n      setInnloggetBruker(JSON.parse(lagretBruker));\n    }\n    \n    // Last inn artikler\n    const lagredeArtikler = localStorage.getItem('artikler');\n    if (lagredeArtikler) {\n      setArtikler(JSON.parse(lagredeArtikler));\n    }\n    \n    // Last inn brukere\n    const lagredeBrukere = localStorage.getItem('brukere');\n    if (lagredeBrukere) {\n      setBrukere(JSON.parse(lagredeBrukere));\n    } else {\n      // Opprett admin-bruker hvis ingen brukere finnes\n      const adminBruker = {\n        id: 'admin-' + Date.now(),\n        navn: 'Administrator',\n        epost: 'admin@nyskolen.no',\n        passord: 'admin123',\n        rolle: 'admin',\n        godkjent: true,\n        dato: new Date().toISOString()\n      };\n      setBrukere([adminBruker]);\n      localStorage.setItem('brukere', JSON.stringify([adminBruker]));\n    }\n    \n    // Last inn jobbliste\n    const lagretJobbliste = localStorage.getItem('jobbliste');\n    if (lagretJobbliste) {\n      setJobbliste(JSON.parse(lagretJobbliste));\n    } else {\n      // Opprett standard jobbliste hvis ingen finnes\n      const standardJobbliste = [\n        {\n          id: 'jobb-1',\n          navn: 'Administrator',\n          rolle: 'Redaktør',\n          dato: new Date().toISOString()\n        }\n      ];\n      setJobbliste(standardJobbliste);\n      localStorage.setItem('jobbliste', JSON.stringify(standardJobbliste));\n    }\n    \n    // Last inn kategoriliste\n    const lagretKategoriliste = localStorage.getItem('kategoriliste');\n    if (lagretKategoriliste) {\n      setKategoriliste(JSON.parse(lagretKategoriliste));\n    } else {\n      // Opprett standard kategoriliste hvis ingen finnes\n      const standardKategoriliste = [\n        {\n          id: 'kat-1',\n          kategori: 'Nyheter',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-2',\n          kategori: 'Kultur',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-3',\n          kategori: 'Sport',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-4',\n          kategori: 'Skole',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-5',\n          kategori: 'Saksmøtet',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-6',\n          kategori: 'Meninger',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-7',\n          kategori: 'Heureka',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-8',\n          kategori: 'Klassen',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-9',\n          kategori: 'Annet',\n          ansvarlig: 'Administrator'\n        }\n      ];\n      setKategoriliste(standardKategoriliste);\n      localStorage.setItem('kategoriliste', JSON.stringify(standardKategoriliste));\n    }\n  }, []);\n  \n  // Funksjon for å logge inn\n  const handleLogin = (bruker) => {\n    setInnloggetBruker(bruker);\n    localStorage.setItem('innloggetBruker', JSON.stringify(bruker));\n  };\n  \n  // Funksjon for å logge ut\n  const handleLogout = () => {\n    setInnloggetBruker(null);\n    localStorage.removeItem('innloggetBruker');\n  };\n  \n  // Funksjon for å registrere ny bruker\n  const registrerBruker = (nyBruker) => {\n    // Sjekk om e-posten allerede er registrert\n    const eksisterendeBruker = brukere.find(b => b.epost === nyBruker.epost);\n    if (eksisterendeBruker) {\n      return { success: false, message: 'E-postadressen er allerede registrert' };\n    }\n    \n    // Sjekk om e-posten er i admin-listen\n    const erAdmin = adminEpostliste.includes(nyBruker.epost);\n    \n    // Opprett bruker-objekt\n    const brukerObjekt = {\n      ...nyBruker,\n      id: 'bruker-' + Date.now(),\n      rolle: erAdmin ? 'admin' : 'journalist',\n      godkjent: true, // Alle brukere er automatisk godkjent\n      dato: new Date().toISOString()\n    };\n    \n    // Legg til i brukerlisten\n    const oppdatertBrukere = [...brukere, brukerObjekt];\n    setBrukere(oppdatertBrukere);\n    localStorage.setItem('brukere', JSON.stringify(oppdatertBrukere));\n    \n    // Legg til i jobblisten\n    const nyJobblisteOppføring = {\n      id: 'jobb-' + Date.now(),\n      navn: brukerObjekt.navn,\n      rolle: erAdmin ? 'Redaktør' : 'Journalist',\n      dato: new Date().toISOString()\n    };\n    \n    const oppdatertJobbliste = [...jobbliste, nyJobblisteOppføring];\n    setJobbliste(oppdatertJobbliste);\n    localStorage.setItem('jobbliste', JSON.stringify(oppdatertJobbliste));\n    \n    return { success: true, message: 'Bruker registrert' };\n  };\n  \n  // Funksjon for å oppdatere bruker\n  const oppdaterBruker = (oppdatertBruker) => {\n    const oppdatertBrukere = brukere.map(bruker => \n      bruker.id === oppdatertBruker.id ? oppdatertBruker : bruker\n    );\n    setBrukere(oppdatertBrukere);\n    localStorage.setItem('brukere', JSON.stringify(oppdatertBrukere));\n    \n    // Oppdater også innlogget bruker hvis det er samme bruker\n    if (innloggetBruker && innloggetBruker.id === oppdatertBruker.id) {\n      setInnloggetBruker(oppdatertBruker);\n      localStorage.setItem('innloggetBruker', JSON.stringify(oppdatertBruker));\n    }\n  };\n  \n  // Funksjon for å slette bruker\n  const slettBruker = (brukerId) => {\n    const oppdatertBrukere = brukere.filter(bruker => bruker.id !== brukerId);\n    setBrukere(oppdatertBrukere);\n    localStorage.setItem('brukere', JSON.stringify(oppdatertBrukere));\n    \n    // Fjern også fra jobblisten\n    const brukerNavn = brukere.find(b => b.id === brukerId)?.navn;\n    if (brukerNavn) {\n      const oppdatertJobbliste = jobbliste.filter(jobb => jobb.navn !== brukerNavn);\n      setJobbliste(oppdatertJobbliste);\n      localStorage.setItem('jobbliste', JSON.stringify(oppdatertJobbliste));\n    }\n  };\n  \n  // Funksjon for å legge til ny artikkel\n  const leggTilArtikkel = (nyArtikkel) => {\n    const artikkelObjekt = {\n      ...nyArtikkel,\n      artikkelID: 'artikkel-' + Date.now(),\n      forfatter: innloggetBruker.navn,\n      forfatterID: innloggetBruker.id,\n      dato: new Date().toISOString(),\n      godkjent: innloggetBruker.rolle === 'admin' || jobbliste.some(jobb => \n        jobb.navn === innloggetBruker.navn && jobb.rolle === 'Redaktør'\n      ) // Automatisk godkjent hvis admin eller redaktør\n    };\n    \n    const oppdatertArtikler = [...artikler, artikkelObjekt];\n    setArtikler(oppdatertArtikler);\n    localStorage.setItem('artikler', JSON.stringify(oppdatertArtikler));\n    \n    return artikkelObjekt.artikkelID;\n  };\n  \n  // Funksjon for å godkjenne artikkel\n  const godkjennArtikkel = (artikkelID) => {\n    const oppdatertArtikler = artikler.map(artikkel => {\n      if (artikkel.artikkelID === artikkelID) {\n        return { ...artikkel, godkjent: true };\n      }\n      return artikkel;\n    });\n    \n    setArtikler(oppdatertArtikler);\n    localStorage.setItem('artikler', JSON.stringify(oppdatertArtikler));\n  };\n  \n  // Funksjon for å slette artikkel\n  const slettArtikkel = (artikkelID) => {\n    const oppdatertArtikler = artikler.filter(artikkel => artikkel.artikkelID !== artikkelID);\n    setArtikler(oppdatertArtikler);\n    localStorage.setItem('artikler', JSON.stringify(oppdatertArtikler));\n  };\n  \n  // Funksjon for å oppdatere artikkel\n  const oppdaterArtikkel = (oppdatertArtikkel) => {\n    const oppdatertArtikler = artikler.map(artikkel => \n      artikkel.artikkelID === oppdatertArtikkel.artikkelID ? oppdatertArtikkel : artikkel\n    );\n    setArtikler(oppdatertArtikler);\n    localStorage.setItem('artikler', JSON.stringify(oppdatertArtikler));\n  };\n  \n  // Funksjon for å oppdatere jobbliste\n  const oppdaterJobbliste = (nyJobbliste) => {\n    setJobbliste(nyJobbliste);\n    localStorage.setItem('jobbliste', JSON.stringify(nyJobbliste));\n  };\n  \n  // Funksjon for å oppdatere kategoriliste\n  const oppdaterKategoriliste = (nyKategoriliste) => {\n    setKategoriliste(nyKategoriliste);\n    localStorage.setItem('kategoriliste', JSON.stringify(nyKategoriliste));\n  };\n  \n  // Funksjon for å endre rolle på en bruker i jobblisten\n  const endreRolleBruker = (jobbId, nyRolle) => {\n    const oppdatertJobbliste = jobbliste.map(jobb => {\n      if (jobb.id === jobbId) {\n        return { ...jobb, rolle: nyRolle };\n      }\n      return jobb;\n    });\n    \n    setJobbliste(oppdatertJobbliste);\n    localStorage.setItem('jobbliste', JSON.stringify(oppdatertJobbliste));\n    \n    // Oppdater også brukerens rolle i brukerlisten\n    const jobb = jobbliste.find(j => j.id === jobbId);\n    if (jobb) {\n      const bruker = brukere.find(b => b.navn === jobb.navn);\n      if (bruker) {\n        const nyBrukerRolle = nyRolle === 'Redaktør' ? 'admin' : 'journalist';\n        const oppdatertBruker = { ...bruker, rolle: nyBrukerRolle };\n        oppdaterBruker(oppdatertBruker);\n      }\n    }\n  };\n  \n  return (\n    <Router>\n      <div className=\"app\">\n        <Header innloggetBruker={innloggetBruker} onLogout={handleLogout} />\n        \n        <main className=\"innhold\">\n          <Routes>\n            <Route path=\"/\" element={<Hjem artikler={artikler} />} />\n            <Route path=\"/innlogging\" element={<Innlogging onLogin={handleLogin} brukere={brukere} />} />\n            <Route path=\"/registrering\" element={<Registrering onRegistrer={registrerBruker} />} />\n            <Route path=\"/ny-artikkel\" element={<NyArtikkel innloggetBruker={innloggetBruker} onLeggTilArtikkel={leggTilArtikkel} kategoriliste={kategoriliste} />} />\n            <Route path=\"/artikkel/:artikkelID\" element={<ArtikkelVisning artikler={artikler} innloggetBruker={innloggetBruker} />} />\n            <Route path=\"/admin\" element={\n              <AdminPanel \n                innloggetBruker={innloggetBruker} \n                artikler={artikler} \n                brukere={brukere} \n                jobbliste={jobbliste}\n                kategoriliste={kategoriliste}\n                onDeleteArticle={slettArtikkel} \n                onUpdateArticle={oppdaterArtikkel} \n                onUpdateUser={oppdaterBruker} \n                onDeleteUser={slettBruker}\n                onApproveArticle={godkjennArtikkel}\n                onUpdateJobbliste={oppdaterJobbliste}\n                onUpdateKategoriliste={oppdaterKategoriliste}\n                onEndreRolleBruker={endreRolleBruker}\n              />\n            } />\n            <Route path=\"/om-oss\" element={<OmOss jobbliste={jobbliste} />} />\n          </Routes>\n        </main>\n        \n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App; "],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,UAAU,GAAI,CAAAC,MAAM,CAAEC,MAAM,CAAEC,KAAK,CAAEC,IAAI,KAAQ,kBAAkB,CAC5E,MAAO,WAAW,CAClB,MAAO,CAAAC,IAAI,KAAM,mBAAmB,CACpC,MAAO,CAAAC,KAAK,KAAM,oBAAoB,CACtC,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,eAAe,KAAM,8BAA8B,CAC1D,MAAO,CAAAC,KAAK,KAAM,oBAAoB,CACtC,MAAO,CAAAC,QAAQ,KAAM,uBAAuB,CAC5C,MAAO,CAAAC,YAAY,KAAM,2BAA2B,CACpD,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,YAAY,KAAM,2BAA2B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAErD,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,eAAe,CAAEC,kBAAkB,CAAC,CAAGzB,QAAQ,CAAC,IAAI,CAAC,CAC5D,KAAM,CAAC0B,QAAQ,CAAEC,WAAW,CAAC,CAAG3B,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAAC4B,OAAO,CAAEC,UAAU,CAAC,CAAG7B,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAAC8B,SAAS,CAAEC,YAAY,CAAC,CAAG/B,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACgC,aAAa,CAAEC,gBAAgB,CAAC,CAAGjC,QAAQ,CAAC,EAAE,CAAC,CAEtD;AACA,KAAM,CAAAkC,eAAe,CAAG,CAAC,6BAA6B,CAAE,mBAAmB,CAAC,CAE5E;AACAjC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAkC,YAAY,CAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAC5D,GAAIF,YAAY,CAAE,CAChBV,kBAAkB,CAACa,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC,CAAC,CAC9C,CAEA;AACA,KAAM,CAAAK,eAAe,CAAGJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CACxD,GAAIG,eAAe,CAAE,CACnBb,WAAW,CAACW,IAAI,CAACC,KAAK,CAACC,eAAe,CAAC,CAAC,CAC1C,CAEA;AACA,KAAM,CAAAC,cAAc,CAAGL,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CACtD,GAAII,cAAc,CAAE,CAClBZ,UAAU,CAACS,IAAI,CAACC,KAAK,CAACE,cAAc,CAAC,CAAC,CACxC,CAAC,IAAM,CACL;AACA,KAAM,CAAAC,WAAW,CAAG,CAClBC,EAAE,CAAE,QAAQ,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CACzBC,IAAI,CAAE,eAAe,CACrBC,KAAK,CAAE,mBAAmB,CAC1BC,OAAO,CAAE,UAAU,CACnBC,KAAK,CAAE,OAAO,CACdC,QAAQ,CAAE,IAAI,CACdC,IAAI,CAAE,GAAI,CAAAP,IAAI,CAAC,CAAC,CAACQ,WAAW,CAAC,CAC/B,CAAC,CACDvB,UAAU,CAAC,CAACa,WAAW,CAAC,CAAC,CACzBN,YAAY,CAACiB,OAAO,CAAC,SAAS,CAAEf,IAAI,CAACgB,SAAS,CAAC,CAACZ,WAAW,CAAC,CAAC,CAAC,CAChE,CAEA;AACA,KAAM,CAAAa,eAAe,CAAGnB,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CACzD,GAAIkB,eAAe,CAAE,CACnBxB,YAAY,CAACO,IAAI,CAACC,KAAK,CAACgB,eAAe,CAAC,CAAC,CAC3C,CAAC,IAAM,CACL;AACA,KAAM,CAAAC,iBAAiB,CAAG,CACxB,CACEb,EAAE,CAAE,QAAQ,CACZG,IAAI,CAAE,eAAe,CACrBG,KAAK,CAAE,UAAU,CACjBE,IAAI,CAAE,GAAI,CAAAP,IAAI,CAAC,CAAC,CAACQ,WAAW,CAAC,CAC/B,CAAC,CACF,CACDrB,YAAY,CAACyB,iBAAiB,CAAC,CAC/BpB,YAAY,CAACiB,OAAO,CAAC,WAAW,CAAEf,IAAI,CAACgB,SAAS,CAACE,iBAAiB,CAAC,CAAC,CACtE,CAEA;AACA,KAAM,CAAAC,mBAAmB,CAAGrB,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CACjE,GAAIoB,mBAAmB,CAAE,CACvBxB,gBAAgB,CAACK,IAAI,CAACC,KAAK,CAACkB,mBAAmB,CAAC,CAAC,CACnD,CAAC,IAAM,CACL;AACA,KAAM,CAAAC,qBAAqB,CAAG,CAC5B,CACEf,EAAE,CAAE,OAAO,CACXgB,QAAQ,CAAE,SAAS,CACnBC,SAAS,CAAE,eACb,CAAC,CACD,CACEjB,EAAE,CAAE,OAAO,CACXgB,QAAQ,CAAE,QAAQ,CAClBC,SAAS,CAAE,eACb,CAAC,CACD,CACEjB,EAAE,CAAE,OAAO,CACXgB,QAAQ,CAAE,OAAO,CACjBC,SAAS,CAAE,eACb,CAAC,CACD,CACEjB,EAAE,CAAE,OAAO,CACXgB,QAAQ,CAAE,OAAO,CACjBC,SAAS,CAAE,eACb,CAAC,CACD,CACEjB,EAAE,CAAE,OAAO,CACXgB,QAAQ,CAAE,WAAW,CACrBC,SAAS,CAAE,eACb,CAAC,CACD,CACEjB,EAAE,CAAE,OAAO,CACXgB,QAAQ,CAAE,UAAU,CACpBC,SAAS,CAAE,eACb,CAAC,CACD,CACEjB,EAAE,CAAE,OAAO,CACXgB,QAAQ,CAAE,SAAS,CACnBC,SAAS,CAAE,eACb,CAAC,CACD,CACEjB,EAAE,CAAE,OAAO,CACXgB,QAAQ,CAAE,SAAS,CACnBC,SAAS,CAAE,eACb,CAAC,CACD,CACEjB,EAAE,CAAE,OAAO,CACXgB,QAAQ,CAAE,OAAO,CACjBC,SAAS,CAAE,eACb,CAAC,CACF,CACD3B,gBAAgB,CAACyB,qBAAqB,CAAC,CACvCtB,YAAY,CAACiB,OAAO,CAAC,eAAe,CAAEf,IAAI,CAACgB,SAAS,CAACI,qBAAqB,CAAC,CAAC,CAC9E,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAG,WAAW,CAAIC,MAAM,EAAK,CAC9BrC,kBAAkB,CAACqC,MAAM,CAAC,CAC1B1B,YAAY,CAACiB,OAAO,CAAC,iBAAiB,CAAEf,IAAI,CAACgB,SAAS,CAACQ,MAAM,CAAC,CAAC,CACjE,CAAC,CAED;AACA,KAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CACzBtC,kBAAkB,CAAC,IAAI,CAAC,CACxBW,YAAY,CAAC4B,UAAU,CAAC,iBAAiB,CAAC,CAC5C,CAAC,CAED;AACA,KAAM,CAAAC,eAAe,CAAIC,QAAQ,EAAK,CACpC;AACA,KAAM,CAAAC,kBAAkB,CAAGvC,OAAO,CAACwC,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACtB,KAAK,GAAKmB,QAAQ,CAACnB,KAAK,CAAC,CACxE,GAAIoB,kBAAkB,CAAE,CACtB,MAAO,CAAEG,OAAO,CAAE,KAAK,CAAEC,OAAO,CAAE,uCAAwC,CAAC,CAC7E,CAEA;AACA,KAAM,CAAAC,OAAO,CAAGtC,eAAe,CAACuC,QAAQ,CAACP,QAAQ,CAACnB,KAAK,CAAC,CAExD;AACA,KAAM,CAAA2B,YAAY,CAAG,CACnB,GAAGR,QAAQ,CACXvB,EAAE,CAAE,SAAS,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAC1BI,KAAK,CAAEuB,OAAO,CAAG,OAAO,CAAG,YAAY,CACvCtB,QAAQ,CAAE,IAAI,CAAE;AAChBC,IAAI,CAAE,GAAI,CAAAP,IAAI,CAAC,CAAC,CAACQ,WAAW,CAAC,CAC/B,CAAC,CAED;AACA,KAAM,CAAAuB,gBAAgB,CAAG,CAAC,GAAG/C,OAAO,CAAE8C,YAAY,CAAC,CACnD7C,UAAU,CAAC8C,gBAAgB,CAAC,CAC5BvC,YAAY,CAACiB,OAAO,CAAC,SAAS,CAAEf,IAAI,CAACgB,SAAS,CAACqB,gBAAgB,CAAC,CAAC,CAEjE;AACA,KAAM,CAAAC,oBAAoB,CAAG,CAC3BjC,EAAE,CAAE,OAAO,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CACxBC,IAAI,CAAE4B,YAAY,CAAC5B,IAAI,CACvBG,KAAK,CAAEuB,OAAO,CAAG,UAAU,CAAG,YAAY,CAC1CrB,IAAI,CAAE,GAAI,CAAAP,IAAI,CAAC,CAAC,CAACQ,WAAW,CAAC,CAC/B,CAAC,CAED,KAAM,CAAAyB,kBAAkB,CAAG,CAAC,GAAG/C,SAAS,CAAE8C,oBAAoB,CAAC,CAC/D7C,YAAY,CAAC8C,kBAAkB,CAAC,CAChCzC,YAAY,CAACiB,OAAO,CAAC,WAAW,CAAEf,IAAI,CAACgB,SAAS,CAACuB,kBAAkB,CAAC,CAAC,CAErE,MAAO,CAAEP,OAAO,CAAE,IAAI,CAAEC,OAAO,CAAE,mBAAoB,CAAC,CACxD,CAAC,CAED;AACA,KAAM,CAAAO,cAAc,CAAIC,eAAe,EAAK,CAC1C,KAAM,CAAAJ,gBAAgB,CAAG/C,OAAO,CAACoD,GAAG,CAAClB,MAAM,EACzCA,MAAM,CAACnB,EAAE,GAAKoC,eAAe,CAACpC,EAAE,CAAGoC,eAAe,CAAGjB,MACvD,CAAC,CACDjC,UAAU,CAAC8C,gBAAgB,CAAC,CAC5BvC,YAAY,CAACiB,OAAO,CAAC,SAAS,CAAEf,IAAI,CAACgB,SAAS,CAACqB,gBAAgB,CAAC,CAAC,CAEjE;AACA,GAAInD,eAAe,EAAIA,eAAe,CAACmB,EAAE,GAAKoC,eAAe,CAACpC,EAAE,CAAE,CAChElB,kBAAkB,CAACsD,eAAe,CAAC,CACnC3C,YAAY,CAACiB,OAAO,CAAC,iBAAiB,CAAEf,IAAI,CAACgB,SAAS,CAACyB,eAAe,CAAC,CAAC,CAC1E,CACF,CAAC,CAED;AACA,KAAM,CAAAE,WAAW,CAAIC,QAAQ,EAAK,KAAAC,aAAA,CAChC,KAAM,CAAAR,gBAAgB,CAAG/C,OAAO,CAACwD,MAAM,CAACtB,MAAM,EAAIA,MAAM,CAACnB,EAAE,GAAKuC,QAAQ,CAAC,CACzErD,UAAU,CAAC8C,gBAAgB,CAAC,CAC5BvC,YAAY,CAACiB,OAAO,CAAC,SAAS,CAAEf,IAAI,CAACgB,SAAS,CAACqB,gBAAgB,CAAC,CAAC,CAEjE;AACA,KAAM,CAAAU,UAAU,EAAAF,aAAA,CAAGvD,OAAO,CAACwC,IAAI,CAACC,CAAC,EAAIA,CAAC,CAAC1B,EAAE,GAAKuC,QAAQ,CAAC,UAAAC,aAAA,iBAApCA,aAAA,CAAsCrC,IAAI,CAC7D,GAAIuC,UAAU,CAAE,CACd,KAAM,CAAAR,kBAAkB,CAAG/C,SAAS,CAACsD,MAAM,CAACE,IAAI,EAAIA,IAAI,CAACxC,IAAI,GAAKuC,UAAU,CAAC,CAC7EtD,YAAY,CAAC8C,kBAAkB,CAAC,CAChCzC,YAAY,CAACiB,OAAO,CAAC,WAAW,CAAEf,IAAI,CAACgB,SAAS,CAACuB,kBAAkB,CAAC,CAAC,CACvE,CACF,CAAC,CAED;AACA,KAAM,CAAAU,eAAe,CAAIC,UAAU,EAAK,CACtC,KAAM,CAAAC,cAAc,CAAG,CACrB,GAAGD,UAAU,CACbE,UAAU,CAAE,WAAW,CAAG9C,IAAI,CAACC,GAAG,CAAC,CAAC,CACpC8C,SAAS,CAAEnE,eAAe,CAACsB,IAAI,CAC/B8C,WAAW,CAAEpE,eAAe,CAACmB,EAAE,CAC/BQ,IAAI,CAAE,GAAI,CAAAP,IAAI,CAAC,CAAC,CAACQ,WAAW,CAAC,CAAC,CAC9BF,QAAQ,CAAE1B,eAAe,CAACyB,KAAK,GAAK,OAAO,EAAInB,SAAS,CAAC+D,IAAI,CAACP,IAAI,EAChEA,IAAI,CAACxC,IAAI,GAAKtB,eAAe,CAACsB,IAAI,EAAIwC,IAAI,CAACrC,KAAK,GAAK,UACvD,CAAE;AACJ,CAAC,CAED,KAAM,CAAA6C,iBAAiB,CAAG,CAAC,GAAGpE,QAAQ,CAAE+D,cAAc,CAAC,CACvD9D,WAAW,CAACmE,iBAAiB,CAAC,CAC9B1D,YAAY,CAACiB,OAAO,CAAC,UAAU,CAAEf,IAAI,CAACgB,SAAS,CAACwC,iBAAiB,CAAC,CAAC,CAEnE,MAAO,CAAAL,cAAc,CAACC,UAAU,CAClC,CAAC,CAED;AACA,KAAM,CAAAK,gBAAgB,CAAIL,UAAU,EAAK,CACvC,KAAM,CAAAI,iBAAiB,CAAGpE,QAAQ,CAACsD,GAAG,CAACgB,QAAQ,EAAI,CACjD,GAAIA,QAAQ,CAACN,UAAU,GAAKA,UAAU,CAAE,CACtC,MAAO,CAAE,GAAGM,QAAQ,CAAE9C,QAAQ,CAAE,IAAK,CAAC,CACxC,CACA,MAAO,CAAA8C,QAAQ,CACjB,CAAC,CAAC,CAEFrE,WAAW,CAACmE,iBAAiB,CAAC,CAC9B1D,YAAY,CAACiB,OAAO,CAAC,UAAU,CAAEf,IAAI,CAACgB,SAAS,CAACwC,iBAAiB,CAAC,CAAC,CACrE,CAAC,CAED;AACA,KAAM,CAAAG,aAAa,CAAIP,UAAU,EAAK,CACpC,KAAM,CAAAI,iBAAiB,CAAGpE,QAAQ,CAAC0D,MAAM,CAACY,QAAQ,EAAIA,QAAQ,CAACN,UAAU,GAAKA,UAAU,CAAC,CACzF/D,WAAW,CAACmE,iBAAiB,CAAC,CAC9B1D,YAAY,CAACiB,OAAO,CAAC,UAAU,CAAEf,IAAI,CAACgB,SAAS,CAACwC,iBAAiB,CAAC,CAAC,CACrE,CAAC,CAED;AACA,KAAM,CAAAI,gBAAgB,CAAIC,iBAAiB,EAAK,CAC9C,KAAM,CAAAL,iBAAiB,CAAGpE,QAAQ,CAACsD,GAAG,CAACgB,QAAQ,EAC7CA,QAAQ,CAACN,UAAU,GAAKS,iBAAiB,CAACT,UAAU,CAAGS,iBAAiB,CAAGH,QAC7E,CAAC,CACDrE,WAAW,CAACmE,iBAAiB,CAAC,CAC9B1D,YAAY,CAACiB,OAAO,CAAC,UAAU,CAAEf,IAAI,CAACgB,SAAS,CAACwC,iBAAiB,CAAC,CAAC,CACrE,CAAC,CAED;AACA,KAAM,CAAAM,iBAAiB,CAAIC,WAAW,EAAK,CACzCtE,YAAY,CAACsE,WAAW,CAAC,CACzBjE,YAAY,CAACiB,OAAO,CAAC,WAAW,CAAEf,IAAI,CAACgB,SAAS,CAAC+C,WAAW,CAAC,CAAC,CAChE,CAAC,CAED;AACA,KAAM,CAAAC,qBAAqB,CAAIC,eAAe,EAAK,CACjDtE,gBAAgB,CAACsE,eAAe,CAAC,CACjCnE,YAAY,CAACiB,OAAO,CAAC,eAAe,CAAEf,IAAI,CAACgB,SAAS,CAACiD,eAAe,CAAC,CAAC,CACxE,CAAC,CAED;AACA,KAAM,CAAAC,gBAAgB,CAAGA,CAACC,MAAM,CAAEC,OAAO,GAAK,CAC5C,KAAM,CAAA7B,kBAAkB,CAAG/C,SAAS,CAACkD,GAAG,CAACM,IAAI,EAAI,CAC/C,GAAIA,IAAI,CAAC3C,EAAE,GAAK8D,MAAM,CAAE,CACtB,MAAO,CAAE,GAAGnB,IAAI,CAAErC,KAAK,CAAEyD,OAAQ,CAAC,CACpC,CACA,MAAO,CAAApB,IAAI,CACb,CAAC,CAAC,CAEFvD,YAAY,CAAC8C,kBAAkB,CAAC,CAChCzC,YAAY,CAACiB,OAAO,CAAC,WAAW,CAAEf,IAAI,CAACgB,SAAS,CAACuB,kBAAkB,CAAC,CAAC,CAErE;AACA,KAAM,CAAAS,IAAI,CAAGxD,SAAS,CAACsC,IAAI,CAACuC,CAAC,EAAIA,CAAC,CAAChE,EAAE,GAAK8D,MAAM,CAAC,CACjD,GAAInB,IAAI,CAAE,CACR,KAAM,CAAAxB,MAAM,CAAGlC,OAAO,CAACwC,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACvB,IAAI,GAAKwC,IAAI,CAACxC,IAAI,CAAC,CACtD,GAAIgB,MAAM,CAAE,CACV,KAAM,CAAA8C,aAAa,CAAGF,OAAO,GAAK,UAAU,CAAG,OAAO,CAAG,YAAY,CACrE,KAAM,CAAA3B,eAAe,CAAG,CAAE,GAAGjB,MAAM,CAAEb,KAAK,CAAE2D,aAAc,CAAC,CAC3D9B,cAAc,CAACC,eAAe,CAAC,CACjC,CACF,CACF,CAAC,CAED,mBACE3D,IAAA,CAACjB,MAAM,EAAA0G,QAAA,cACLvF,KAAA,QAAKwF,SAAS,CAAC,KAAK,CAAAD,QAAA,eAClBzF,IAAA,CAACJ,MAAM,EAACQ,eAAe,CAAEA,eAAgB,CAACuF,QAAQ,CAAEhD,YAAa,CAAE,CAAC,cAEpE3C,IAAA,SAAM0F,SAAS,CAAC,SAAS,CAAAD,QAAA,cACvBvF,KAAA,CAAClB,MAAM,EAAAyG,QAAA,eACLzF,IAAA,CAACf,KAAK,EAAC2G,IAAI,CAAC,GAAG,CAACC,OAAO,cAAE7F,IAAA,CAACb,IAAI,EAACmB,QAAQ,CAAEA,QAAS,CAAE,CAAE,CAAE,CAAC,cACzDN,IAAA,CAACf,KAAK,EAAC2G,IAAI,CAAC,aAAa,CAACC,OAAO,cAAE7F,IAAA,CAACH,UAAU,EAACiG,OAAO,CAAErD,WAAY,CAACjC,OAAO,CAAEA,OAAQ,CAAE,CAAE,CAAE,CAAC,cAC7FR,IAAA,CAACf,KAAK,EAAC2G,IAAI,CAAC,eAAe,CAACC,OAAO,cAAE7F,IAAA,CAACF,YAAY,EAACiG,WAAW,CAAElD,eAAgB,CAAE,CAAE,CAAE,CAAC,cACvF7C,IAAA,CAACf,KAAK,EAAC2G,IAAI,CAAC,cAAc,CAACC,OAAO,cAAE7F,IAAA,CAACX,UAAU,EAACe,eAAe,CAAEA,eAAgB,CAAC4F,iBAAiB,CAAE7B,eAAgB,CAACvD,aAAa,CAAEA,aAAc,CAAE,CAAE,CAAE,CAAC,cAC1JZ,IAAA,CAACf,KAAK,EAAC2G,IAAI,CAAC,uBAAuB,CAACC,OAAO,cAAE7F,IAAA,CAACV,eAAe,EAACgB,QAAQ,CAAEA,QAAS,CAACF,eAAe,CAAEA,eAAgB,CAAE,CAAE,CAAE,CAAC,cAC1HJ,IAAA,CAACf,KAAK,EAAC2G,IAAI,CAAC,QAAQ,CAACC,OAAO,cAC1B7F,IAAA,CAACN,UAAU,EACTU,eAAe,CAAEA,eAAgB,CACjCE,QAAQ,CAAEA,QAAS,CACnBE,OAAO,CAAEA,OAAQ,CACjBE,SAAS,CAAEA,SAAU,CACrBE,aAAa,CAAEA,aAAc,CAC7BqF,eAAe,CAAEpB,aAAc,CAC/BqB,eAAe,CAAEpB,gBAAiB,CAClCqB,YAAY,CAAEzC,cAAe,CAC7B0C,YAAY,CAAEvC,WAAY,CAC1BwC,gBAAgB,CAAE1B,gBAAiB,CACnC2B,iBAAiB,CAAEtB,iBAAkB,CACrCuB,qBAAqB,CAAErB,qBAAsB,CAC7CsB,kBAAkB,CAAEpB,gBAAiB,CACtC,CACF,CAAE,CAAC,cACJpF,IAAA,CAACf,KAAK,EAAC2G,IAAI,CAAC,SAAS,CAACC,OAAO,cAAE7F,IAAA,CAACZ,KAAK,EAACsB,SAAS,CAAEA,SAAU,CAAE,CAAE,CAAE,CAAC,EAC5D,CAAC,CACL,CAAC,cAEPV,IAAA,CAACL,MAAM,GAAE,CAAC,EACP,CAAC,CACA,CAAC,CAEb,CAEA,cAAe,CAAAQ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}