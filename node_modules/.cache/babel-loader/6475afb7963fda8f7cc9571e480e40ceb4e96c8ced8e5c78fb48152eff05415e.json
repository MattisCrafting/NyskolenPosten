{"ast":null,"code":"var _jsxFileName = \"/Users/mattis/src/NyskolenPosten/src/App.js\",\n  _s = $RefreshSig$();\n// App.js - Hovedkomponenten for Nyskolen Posten\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport './App.css';\nimport Hjem from './components/Hjem';\nimport OmOss from './components/OmOss';\nimport NyArtikkel from './components/NyArtikkel';\nimport ArtikkelVisning from './components/ArtikkelVisning';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport MineArtikler from './components/MineArtikler';\nimport AdminPanel from './components/AdminPanel';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport Innlogging from './components/Innlogging';\nimport Registrering from './components/Registrering';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [innloggetBruker, setInnloggetBruker] = useState(null);\n  const [artikler, setArtikler] = useState([]);\n  const [brukere, setBrukere] = useState([]);\n  const [jobbliste, setJobbliste] = useState([]);\n  const [kategoriliste, setKategoriliste] = useState([]);\n\n  // Admin e-postliste for automatisk godkjenning og admin-rolle\n  const adminEpostliste = ['mattis.tollefsen@nionett.no', 'admin@nyskolen.no'];\n\n  // Last inn data fra localStorage ved oppstart\n  useEffect(() => {\n    // Last inn innlogget bruker\n    const lagretBruker = localStorage.getItem('innloggetBruker');\n    if (lagretBruker) {\n      setInnloggetBruker(JSON.parse(lagretBruker));\n    }\n\n    // Last inn artikler\n    const lagredeArtikler = localStorage.getItem('artikler');\n    if (lagredeArtikler) {\n      setArtikler(JSON.parse(lagredeArtikler));\n    }\n\n    // Last inn brukere\n    const lagredeBrukere = localStorage.getItem('brukere');\n    if (lagredeBrukere) {\n      setBrukere(JSON.parse(lagredeBrukere));\n    } else {\n      // Opprett admin-bruker hvis ingen brukere finnes\n      const adminBruker = {\n        id: 'admin-' + Date.now(),\n        navn: 'Administrator',\n        epost: 'admin@nyskolen.no',\n        passord: 'admin123',\n        rolle: 'admin',\n        godkjent: true,\n        dato: new Date().toISOString()\n      };\n      setBrukere([adminBruker]);\n      localStorage.setItem('brukere', JSON.stringify([adminBruker]));\n    }\n\n    // Last inn jobbliste\n    const lagretJobbliste = localStorage.getItem('jobbliste');\n    if (lagretJobbliste) {\n      setJobbliste(JSON.parse(lagretJobbliste));\n    } else {\n      // Opprett standard jobbliste hvis ingen finnes\n      const standardJobbliste = [{\n        id: 'jobb-1',\n        navn: 'Administrator',\n        rolle: 'Redaktør',\n        dato: new Date().toISOString()\n      }];\n      setJobbliste(standardJobbliste);\n      localStorage.setItem('jobbliste', JSON.stringify(standardJobbliste));\n    }\n\n    // Last inn kategoriliste\n    const lagretKategoriliste = localStorage.getItem('kategoriliste');\n    if (lagretKategoriliste) {\n      setKategoriliste(JSON.parse(lagretKategoriliste));\n    } else {\n      // Opprett standard kategoriliste hvis ingen finnes\n      const standardKategoriliste = [{\n        id: 'kat-1',\n        kategori: 'Nyheter',\n        ansvarlig: 'Administrator'\n      }, {\n        id: 'kat-2',\n        kategori: 'Kultur',\n        ansvarlig: 'Administrator'\n      }, {\n        id: 'kat-3',\n        kategori: 'Sport',\n        ansvarlig: 'Administrator'\n      }, {\n        id: 'kat-4',\n        kategori: 'Skole',\n        ansvarlig: 'Administrator'\n      }, {\n        id: 'kat-5',\n        kategori: 'Saksmøtet',\n        ansvarlig: 'Administrator'\n      }, {\n        id: 'kat-6',\n        kategori: 'Meninger',\n        ansvarlig: 'Administrator'\n      }, {\n        id: 'kat-7',\n        kategori: 'Heureka',\n        ansvarlig: 'Administrator'\n      }, {\n        id: 'kat-8',\n        kategori: 'Klassen',\n        ansvarlig: 'Administrator'\n      }, {\n        id: 'kat-9',\n        kategori: 'Annet',\n        ansvarlig: 'Administrator'\n      }];\n      setKategoriliste(standardKategoriliste);\n      localStorage.setItem('kategoriliste', JSON.stringify(standardKategoriliste));\n    }\n  }, []);\n\n  // Funksjon for å logge inn\n  const handleLogin = bruker => {\n    setInnloggetBruker(bruker);\n    localStorage.setItem('innloggetBruker', JSON.stringify(bruker));\n  };\n\n  // Funksjon for å logge ut\n  const handleLogout = () => {\n    setInnloggetBruker(null);\n    localStorage.removeItem('innloggetBruker');\n  };\n\n  // Funksjon for å registrere ny bruker\n  const registrerBruker = nyBruker => {\n    // Sjekk om e-posten allerede er registrert\n    const eksisterendeBruker = brukere.find(b => b.epost === nyBruker.epost);\n    if (eksisterendeBruker) {\n      return {\n        success: false,\n        message: 'E-postadressen er allerede registrert'\n      };\n    }\n\n    // Sjekk om e-posten er i admin-listen\n    const erAdmin = adminEpostliste.includes(nyBruker.epost);\n\n    // Opprett bruker-objekt\n    const brukerObjekt = {\n      ...nyBruker,\n      id: 'bruker-' + Date.now(),\n      rolle: erAdmin ? 'admin' : 'journalist',\n      godkjent: erAdmin,\n      // Automatisk godkjent hvis admin\n      dato: new Date().toISOString()\n    };\n\n    // Legg til i brukerlisten\n    const oppdatertBrukere = [...brukere, brukerObjekt];\n    setBrukere(oppdatertBrukere);\n    localStorage.setItem('brukere', JSON.stringify(oppdatertBrukere));\n\n    // Hvis admin, legg til i jobblisten\n    if (erAdmin) {\n      const nyJobblisteOppføring = {\n        id: 'jobb-' + Date.now(),\n        navn: brukerObjekt.navn,\n        rolle: 'Redaktør',\n        dato: new Date().toISOString()\n      };\n      const oppdatertJobbliste = [...jobbliste, nyJobblisteOppføring];\n      setJobbliste(oppdatertJobbliste);\n      localStorage.setItem('jobbliste', JSON.stringify(oppdatertJobbliste));\n    }\n    return {\n      success: true,\n      message: 'Bruker registrert'\n    };\n  };\n\n  // Funksjon for å godkjenne bruker\n  const godkjennBruker = brukerId => {\n    const oppdatertBrukere = brukere.map(bruker => {\n      if (bruker.id === brukerId) {\n        const oppdatertBruker = {\n          ...bruker,\n          godkjent: true\n        };\n\n        // Legg til i jobblisten som journalist\n        const nyJobblisteOppføring = {\n          id: 'jobb-' + Date.now(),\n          navn: bruker.navn,\n          rolle: 'Journalist',\n          dato: new Date().toISOString()\n        };\n        const oppdatertJobbliste = [...jobbliste, nyJobblisteOppføring];\n        setJobbliste(oppdatertJobbliste);\n        localStorage.setItem('jobbliste', JSON.stringify(oppdatertJobbliste));\n        return oppdatertBruker;\n      }\n      return bruker;\n    });\n    setBrukere(oppdatertBrukere);\n    localStorage.setItem('brukere', JSON.stringify(oppdatertBrukere));\n  };\n\n  // Funksjon for å slette bruker\n  const slettBruker = brukerId => {\n    var _brukere$find;\n    const oppdatertBrukere = brukere.filter(bruker => bruker.id !== brukerId);\n    setBrukere(oppdatertBrukere);\n    localStorage.setItem('brukere', JSON.stringify(oppdatertBrukere));\n\n    // Fjern også fra jobblisten\n    const brukerNavn = (_brukere$find = brukere.find(b => b.id === brukerId)) === null || _brukere$find === void 0 ? void 0 : _brukere$find.navn;\n    if (brukerNavn) {\n      const oppdatertJobbliste = jobbliste.filter(jobb => jobb.navn !== brukerNavn);\n      setJobbliste(oppdatertJobbliste);\n      localStorage.setItem('jobbliste', JSON.stringify(oppdatertJobbliste));\n    }\n  };\n\n  // Funksjon for å oppdatere bruker\n  const oppdaterBruker = oppdatertBruker => {\n    const oppdatertBrukere = brukere.map(bruker => bruker.id === oppdatertBruker.id ? oppdatertBruker : bruker);\n    setBrukere(oppdatertBrukere);\n    localStorage.setItem('brukere', JSON.stringify(oppdatertBrukere));\n\n    // Oppdater også innlogget bruker hvis det er samme bruker\n    if (innloggetBruker && innloggetBruker.id === oppdatertBruker.id) {\n      setInnloggetBruker(oppdatertBruker);\n      localStorage.setItem('innloggetBruker', JSON.stringify(oppdatertBruker));\n    }\n  };\n\n  // Funksjon for å legge til ny artikkel\n  const leggTilArtikkel = nyArtikkel => {\n    const artikkelObjekt = {\n      ...nyArtikkel,\n      artikkelID: 'artikkel-' + Date.now(),\n      forfatter: innloggetBruker.navn,\n      forfatterID: innloggetBruker.id,\n      dato: new Date().toISOString(),\n      godkjent: innloggetBruker.rolle === 'admin' // Automatisk godkjent hvis admin\n    };\n    const oppdatertArtikler = [...artikler, artikkelObjekt];\n    setArtikler(oppdatertArtikler);\n    localStorage.setItem('artikler', JSON.stringify(oppdatertArtikler));\n    return artikkelObjekt.artikkelID;\n  };\n\n  // Funksjon for å godkjenne artikkel\n  const godkjennArtikkel = artikkelID => {\n    const oppdatertArtikler = artikler.map(artikkel => {\n      if (artikkel.artikkelID === artikkelID) {\n        return {\n          ...artikkel,\n          godkjent: true\n        };\n      }\n      return artikkel;\n    });\n    setArtikler(oppdatertArtikler);\n    localStorage.setItem('artikler', JSON.stringify(oppdatertArtikler));\n  };\n\n  // Funksjon for å slette artikkel\n  const slettArtikkel = artikkelID => {\n    const oppdatertArtikler = artikler.filter(artikkel => artikkel.artikkelID !== artikkelID);\n    setArtikler(oppdatertArtikler);\n    localStorage.setItem('artikler', JSON.stringify(oppdatertArtikler));\n  };\n\n  // Funksjon for å oppdatere artikkel\n  const oppdaterArtikkel = oppdatertArtikkel => {\n    const oppdatertArtikler = artikler.map(artikkel => artikkel.artikkelID === oppdatertArtikkel.artikkelID ? oppdatertArtikkel : artikkel);\n    setArtikler(oppdatertArtikler);\n    localStorage.setItem('artikler', JSON.stringify(oppdatertArtikler));\n  };\n\n  // Funksjon for å oppdatere jobbliste\n  const oppdaterJobbliste = nyJobbliste => {\n    setJobbliste(nyJobbliste);\n    localStorage.setItem('jobbliste', JSON.stringify(nyJobbliste));\n  };\n\n  // Funksjon for å oppdatere kategoriliste\n  const oppdaterKategoriliste = nyKategoriliste => {\n    setKategoriliste(nyKategoriliste);\n    localStorage.setItem('kategoriliste', JSON.stringify(nyKategoriliste));\n  };\n\n  // Funksjon for å endre rolle på en bruker i jobblisten\n  const endreRolleBruker = (jobbId, nyRolle) => {\n    const oppdatertJobbliste = jobbliste.map(jobb => {\n      if (jobb.id === jobbId) {\n        return {\n          ...jobb,\n          rolle: nyRolle\n        };\n      }\n      return jobb;\n    });\n    setJobbliste(oppdatertJobbliste);\n    localStorage.setItem('jobbliste', JSON.stringify(oppdatertJobbliste));\n\n    // Oppdater også brukerens rolle i brukerlisten\n    const jobb = jobbliste.find(j => j.id === jobbId);\n    if (jobb) {\n      const bruker = brukere.find(b => b.navn === jobb.navn);\n      if (bruker) {\n        const nyBrukerRolle = nyRolle === 'Redaktør' ? 'admin' : 'journalist';\n        const oppdatertBruker = {\n          ...bruker,\n          rolle: nyBrukerRolle\n        };\n        oppdaterBruker(oppdatertBruker);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        innloggetBruker: innloggetBruker,\n        onLogout: handleLogout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"innhold\",\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Hjem, {\n              artikler: artikler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 38\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/innlogging\",\n            element: /*#__PURE__*/_jsxDEV(Innlogging, {\n              onLogin: handleLogin,\n              brukere: brukere\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 48\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/registrering\",\n            element: /*#__PURE__*/_jsxDEV(Registrering, {\n              onRegistrer: registrerBruker\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/ny-artikkel\",\n            element: /*#__PURE__*/_jsxDEV(NyArtikkel, {\n              innloggetBruker: innloggetBruker,\n              onLeggTilArtikkel: leggTilArtikkel,\n              kategoriliste: kategoriliste\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 49\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/artikkel/:artikkelID\",\n            element: /*#__PURE__*/_jsxDEV(ArtikkelVisning, {\n              artikler: artikler,\n              innloggetBruker: innloggetBruker\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/admin\",\n            element: /*#__PURE__*/_jsxDEV(AdminPanel, {\n              innloggetBruker: innloggetBruker,\n              artikler: artikler,\n              brukere: brukere,\n              jobbliste: jobbliste,\n              kategoriliste: kategoriliste,\n              onDeleteArticle: slettArtikkel,\n              onUpdateArticle: oppdaterArtikkel,\n              onUpdateUser: oppdaterBruker,\n              onDeleteUser: slettBruker,\n              onApproveArticle: godkjennArtikkel,\n              onApproveUser: godkjennBruker,\n              onUpdateJobbliste: oppdaterJobbliste,\n              onUpdateKategoriliste: oppdaterKategoriliste,\n              onEndreRolleBruker: endreRolleBruker\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/om-oss\",\n            element: /*#__PURE__*/_jsxDEV(OmOss, {\n              jobbliste: jobbliste\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 44\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5xf5UPYU0O99my6Q+abukJHHVO0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Link","Hjem","OmOss","NyArtikkel","ArtikkelVisning","Login","Register","MineArtikler","AdminPanel","Footer","Header","Innlogging","Registrering","jsxDEV","_jsxDEV","App","_s","innloggetBruker","setInnloggetBruker","artikler","setArtikler","brukere","setBrukere","jobbliste","setJobbliste","kategoriliste","setKategoriliste","adminEpostliste","lagretBruker","localStorage","getItem","JSON","parse","lagredeArtikler","lagredeBrukere","adminBruker","id","Date","now","navn","epost","passord","rolle","godkjent","dato","toISOString","setItem","stringify","lagretJobbliste","standardJobbliste","lagretKategoriliste","standardKategoriliste","kategori","ansvarlig","handleLogin","bruker","handleLogout","removeItem","registrerBruker","nyBruker","eksisterendeBruker","find","b","success","message","erAdmin","includes","brukerObjekt","oppdatertBrukere","nyJobblisteOppføring","oppdatertJobbliste","godkjennBruker","brukerId","map","oppdatertBruker","slettBruker","_brukere$find","filter","brukerNavn","jobb","oppdaterBruker","leggTilArtikkel","nyArtikkel","artikkelObjekt","artikkelID","forfatter","forfatterID","oppdatertArtikler","godkjennArtikkel","artikkel","slettArtikkel","oppdaterArtikkel","oppdatertArtikkel","oppdaterJobbliste","nyJobbliste","oppdaterKategoriliste","nyKategoriliste","endreRolleBruker","jobbId","nyRolle","j","nyBrukerRolle","children","className","onLogout","fileName","_jsxFileName","lineNumber","columnNumber","path","element","onLogin","onRegistrer","onLeggTilArtikkel","onDeleteArticle","onUpdateArticle","onUpdateUser","onDeleteUser","onApproveArticle","onApproveUser","onUpdateJobbliste","onUpdateKategoriliste","onEndreRolleBruker","_c","$RefreshReg$"],"sources":["/Users/mattis/src/NyskolenPosten/src/App.js"],"sourcesContent":["// App.js - Hovedkomponenten for Nyskolen Posten\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport './App.css';\nimport Hjem from './components/Hjem';\nimport OmOss from './components/OmOss';\nimport NyArtikkel from './components/NyArtikkel';\nimport ArtikkelVisning from './components/ArtikkelVisning';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport MineArtikler from './components/MineArtikler';\nimport AdminPanel from './components/AdminPanel';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport Innlogging from './components/Innlogging';\nimport Registrering from './components/Registrering';\n\nfunction App() {\n  const [innloggetBruker, setInnloggetBruker] = useState(null);\n  const [artikler, setArtikler] = useState([]);\n  const [brukere, setBrukere] = useState([]);\n  const [jobbliste, setJobbliste] = useState([]);\n  const [kategoriliste, setKategoriliste] = useState([]);\n  \n  // Admin e-postliste for automatisk godkjenning og admin-rolle\n  const adminEpostliste = ['mattis.tollefsen@nionett.no', 'admin@nyskolen.no'];\n  \n  // Last inn data fra localStorage ved oppstart\n  useEffect(() => {\n    // Last inn innlogget bruker\n    const lagretBruker = localStorage.getItem('innloggetBruker');\n    if (lagretBruker) {\n      setInnloggetBruker(JSON.parse(lagretBruker));\n    }\n    \n    // Last inn artikler\n    const lagredeArtikler = localStorage.getItem('artikler');\n    if (lagredeArtikler) {\n      setArtikler(JSON.parse(lagredeArtikler));\n    }\n    \n    // Last inn brukere\n    const lagredeBrukere = localStorage.getItem('brukere');\n    if (lagredeBrukere) {\n      setBrukere(JSON.parse(lagredeBrukere));\n    } else {\n      // Opprett admin-bruker hvis ingen brukere finnes\n      const adminBruker = {\n        id: 'admin-' + Date.now(),\n        navn: 'Administrator',\n        epost: 'admin@nyskolen.no',\n        passord: 'admin123',\n        rolle: 'admin',\n        godkjent: true,\n        dato: new Date().toISOString()\n      };\n      setBrukere([adminBruker]);\n      localStorage.setItem('brukere', JSON.stringify([adminBruker]));\n    }\n    \n    // Last inn jobbliste\n    const lagretJobbliste = localStorage.getItem('jobbliste');\n    if (lagretJobbliste) {\n      setJobbliste(JSON.parse(lagretJobbliste));\n    } else {\n      // Opprett standard jobbliste hvis ingen finnes\n      const standardJobbliste = [\n        {\n          id: 'jobb-1',\n          navn: 'Administrator',\n          rolle: 'Redaktør',\n          dato: new Date().toISOString()\n        }\n      ];\n      setJobbliste(standardJobbliste);\n      localStorage.setItem('jobbliste', JSON.stringify(standardJobbliste));\n    }\n    \n    // Last inn kategoriliste\n    const lagretKategoriliste = localStorage.getItem('kategoriliste');\n    if (lagretKategoriliste) {\n      setKategoriliste(JSON.parse(lagretKategoriliste));\n    } else {\n      // Opprett standard kategoriliste hvis ingen finnes\n      const standardKategoriliste = [\n        {\n          id: 'kat-1',\n          kategori: 'Nyheter',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-2',\n          kategori: 'Kultur',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-3',\n          kategori: 'Sport',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-4',\n          kategori: 'Skole',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-5',\n          kategori: 'Saksmøtet',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-6',\n          kategori: 'Meninger',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-7',\n          kategori: 'Heureka',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-8',\n          kategori: 'Klassen',\n          ansvarlig: 'Administrator'\n        },\n        {\n          id: 'kat-9',\n          kategori: 'Annet',\n          ansvarlig: 'Administrator'\n        }\n      ];\n      setKategoriliste(standardKategoriliste);\n      localStorage.setItem('kategoriliste', JSON.stringify(standardKategoriliste));\n    }\n  }, []);\n  \n  // Funksjon for å logge inn\n  const handleLogin = (bruker) => {\n    setInnloggetBruker(bruker);\n    localStorage.setItem('innloggetBruker', JSON.stringify(bruker));\n  };\n  \n  // Funksjon for å logge ut\n  const handleLogout = () => {\n    setInnloggetBruker(null);\n    localStorage.removeItem('innloggetBruker');\n  };\n  \n  // Funksjon for å registrere ny bruker\n  const registrerBruker = (nyBruker) => {\n    // Sjekk om e-posten allerede er registrert\n    const eksisterendeBruker = brukere.find(b => b.epost === nyBruker.epost);\n    if (eksisterendeBruker) {\n      return { success: false, message: 'E-postadressen er allerede registrert' };\n    }\n    \n    // Sjekk om e-posten er i admin-listen\n    const erAdmin = adminEpostliste.includes(nyBruker.epost);\n    \n    // Opprett bruker-objekt\n    const brukerObjekt = {\n      ...nyBruker,\n      id: 'bruker-' + Date.now(),\n      rolle: erAdmin ? 'admin' : 'journalist',\n      godkjent: erAdmin, // Automatisk godkjent hvis admin\n      dato: new Date().toISOString()\n    };\n    \n    // Legg til i brukerlisten\n    const oppdatertBrukere = [...brukere, brukerObjekt];\n    setBrukere(oppdatertBrukere);\n    localStorage.setItem('brukere', JSON.stringify(oppdatertBrukere));\n    \n    // Hvis admin, legg til i jobblisten\n    if (erAdmin) {\n      const nyJobblisteOppføring = {\n        id: 'jobb-' + Date.now(),\n        navn: brukerObjekt.navn,\n        rolle: 'Redaktør',\n        dato: new Date().toISOString()\n      };\n      \n      const oppdatertJobbliste = [...jobbliste, nyJobblisteOppføring];\n      setJobbliste(oppdatertJobbliste);\n      localStorage.setItem('jobbliste', JSON.stringify(oppdatertJobbliste));\n    }\n    \n    return { success: true, message: 'Bruker registrert' };\n  };\n  \n  // Funksjon for å godkjenne bruker\n  const godkjennBruker = (brukerId) => {\n    const oppdatertBrukere = brukere.map(bruker => {\n      if (bruker.id === brukerId) {\n        const oppdatertBruker = { ...bruker, godkjent: true };\n        \n        // Legg til i jobblisten som journalist\n        const nyJobblisteOppføring = {\n          id: 'jobb-' + Date.now(),\n          navn: bruker.navn,\n          rolle: 'Journalist',\n          dato: new Date().toISOString()\n        };\n        \n        const oppdatertJobbliste = [...jobbliste, nyJobblisteOppføring];\n        setJobbliste(oppdatertJobbliste);\n        localStorage.setItem('jobbliste', JSON.stringify(oppdatertJobbliste));\n        \n        return oppdatertBruker;\n      }\n      return bruker;\n    });\n    \n    setBrukere(oppdatertBrukere);\n    localStorage.setItem('brukere', JSON.stringify(oppdatertBrukere));\n  };\n  \n  // Funksjon for å slette bruker\n  const slettBruker = (brukerId) => {\n    const oppdatertBrukere = brukere.filter(bruker => bruker.id !== brukerId);\n    setBrukere(oppdatertBrukere);\n    localStorage.setItem('brukere', JSON.stringify(oppdatertBrukere));\n    \n    // Fjern også fra jobblisten\n    const brukerNavn = brukere.find(b => b.id === brukerId)?.navn;\n    if (brukerNavn) {\n      const oppdatertJobbliste = jobbliste.filter(jobb => jobb.navn !== brukerNavn);\n      setJobbliste(oppdatertJobbliste);\n      localStorage.setItem('jobbliste', JSON.stringify(oppdatertJobbliste));\n    }\n  };\n  \n  // Funksjon for å oppdatere bruker\n  const oppdaterBruker = (oppdatertBruker) => {\n    const oppdatertBrukere = brukere.map(bruker => \n      bruker.id === oppdatertBruker.id ? oppdatertBruker : bruker\n    );\n    setBrukere(oppdatertBrukere);\n    localStorage.setItem('brukere', JSON.stringify(oppdatertBrukere));\n    \n    // Oppdater også innlogget bruker hvis det er samme bruker\n    if (innloggetBruker && innloggetBruker.id === oppdatertBruker.id) {\n      setInnloggetBruker(oppdatertBruker);\n      localStorage.setItem('innloggetBruker', JSON.stringify(oppdatertBruker));\n    }\n  };\n  \n  // Funksjon for å legge til ny artikkel\n  const leggTilArtikkel = (nyArtikkel) => {\n    const artikkelObjekt = {\n      ...nyArtikkel,\n      artikkelID: 'artikkel-' + Date.now(),\n      forfatter: innloggetBruker.navn,\n      forfatterID: innloggetBruker.id,\n      dato: new Date().toISOString(),\n      godkjent: innloggetBruker.rolle === 'admin' // Automatisk godkjent hvis admin\n    };\n    \n    const oppdatertArtikler = [...artikler, artikkelObjekt];\n    setArtikler(oppdatertArtikler);\n    localStorage.setItem('artikler', JSON.stringify(oppdatertArtikler));\n    \n    return artikkelObjekt.artikkelID;\n  };\n  \n  // Funksjon for å godkjenne artikkel\n  const godkjennArtikkel = (artikkelID) => {\n    const oppdatertArtikler = artikler.map(artikkel => {\n      if (artikkel.artikkelID === artikkelID) {\n        return { ...artikkel, godkjent: true };\n      }\n      return artikkel;\n    });\n    \n    setArtikler(oppdatertArtikler);\n    localStorage.setItem('artikler', JSON.stringify(oppdatertArtikler));\n  };\n  \n  // Funksjon for å slette artikkel\n  const slettArtikkel = (artikkelID) => {\n    const oppdatertArtikler = artikler.filter(artikkel => artikkel.artikkelID !== artikkelID);\n    setArtikler(oppdatertArtikler);\n    localStorage.setItem('artikler', JSON.stringify(oppdatertArtikler));\n  };\n  \n  // Funksjon for å oppdatere artikkel\n  const oppdaterArtikkel = (oppdatertArtikkel) => {\n    const oppdatertArtikler = artikler.map(artikkel => \n      artikkel.artikkelID === oppdatertArtikkel.artikkelID ? oppdatertArtikkel : artikkel\n    );\n    setArtikler(oppdatertArtikler);\n    localStorage.setItem('artikler', JSON.stringify(oppdatertArtikler));\n  };\n  \n  // Funksjon for å oppdatere jobbliste\n  const oppdaterJobbliste = (nyJobbliste) => {\n    setJobbliste(nyJobbliste);\n    localStorage.setItem('jobbliste', JSON.stringify(nyJobbliste));\n  };\n  \n  // Funksjon for å oppdatere kategoriliste\n  const oppdaterKategoriliste = (nyKategoriliste) => {\n    setKategoriliste(nyKategoriliste);\n    localStorage.setItem('kategoriliste', JSON.stringify(nyKategoriliste));\n  };\n  \n  // Funksjon for å endre rolle på en bruker i jobblisten\n  const endreRolleBruker = (jobbId, nyRolle) => {\n    const oppdatertJobbliste = jobbliste.map(jobb => {\n      if (jobb.id === jobbId) {\n        return { ...jobb, rolle: nyRolle };\n      }\n      return jobb;\n    });\n    \n    setJobbliste(oppdatertJobbliste);\n    localStorage.setItem('jobbliste', JSON.stringify(oppdatertJobbliste));\n    \n    // Oppdater også brukerens rolle i brukerlisten\n    const jobb = jobbliste.find(j => j.id === jobbId);\n    if (jobb) {\n      const bruker = brukere.find(b => b.navn === jobb.navn);\n      if (bruker) {\n        const nyBrukerRolle = nyRolle === 'Redaktør' ? 'admin' : 'journalist';\n        const oppdatertBruker = { ...bruker, rolle: nyBrukerRolle };\n        oppdaterBruker(oppdatertBruker);\n      }\n    }\n  };\n  \n  return (\n    <Router>\n      <div className=\"app\">\n        <Header innloggetBruker={innloggetBruker} onLogout={handleLogout} />\n        \n        <main className=\"innhold\">\n          <Routes>\n            <Route path=\"/\" element={<Hjem artikler={artikler} />} />\n            <Route path=\"/innlogging\" element={<Innlogging onLogin={handleLogin} brukere={brukere} />} />\n            <Route path=\"/registrering\" element={<Registrering onRegistrer={registrerBruker} />} />\n            <Route path=\"/ny-artikkel\" element={<NyArtikkel innloggetBruker={innloggetBruker} onLeggTilArtikkel={leggTilArtikkel} kategoriliste={kategoriliste} />} />\n            <Route path=\"/artikkel/:artikkelID\" element={<ArtikkelVisning artikler={artikler} innloggetBruker={innloggetBruker} />} />\n            <Route path=\"/admin\" element={\n              <AdminPanel \n                innloggetBruker={innloggetBruker} \n                artikler={artikler} \n                brukere={brukere} \n                jobbliste={jobbliste}\n                kategoriliste={kategoriliste}\n                onDeleteArticle={slettArtikkel} \n                onUpdateArticle={oppdaterArtikkel} \n                onUpdateUser={oppdaterBruker} \n                onDeleteUser={slettBruker}\n                onApproveArticle={godkjennArtikkel}\n                onApproveUser={godkjennBruker}\n                onUpdateJobbliste={oppdaterJobbliste}\n                onUpdateKategoriliste={oppdaterKategoriliste}\n                onEndreRolleBruker={endreRolleBruker}\n              />\n            } />\n            <Route path=\"/om-oss\" element={<OmOss jobbliste={jobbliste} />} />\n          </Routes>\n        </main>\n        \n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}